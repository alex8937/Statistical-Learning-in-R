y = runif(100)
?runif
y = runif(100)
x = m1 <- round(matrix(runif(100 * 100), 100, 100)))
y = runif(100)
x = round(matrix(runif(100 * 100), 100, 100)))
y = runif(100)
x = round(matrix(runif(100 * 100), 100, 100)))
y = runif(100)
x = round(matrix(runif(100 * 100), 100, 100)))
x = round(matrix(runif(100 * 100), 100, 100))
y
x
y = runif(100)
x = matrix(runif(100 * 100), 100, 100)
y
x
y = round(runif(100))
x = matrix(runif(100 * 100), 100, 100)
cor(x, y)
cor(x, y) > 0
cor(x, y) > 0.5
cor(x, y) > 0.05
cor(x, y) > 0.3
cor(x, y) > 0.2
cor(x, y) > 0.15
x_new <- x[cor(x, y) > 0.15]
x_new
shape(x_new)
x_new <- x[cor(x, y) > 0.15]
x_new
type(x_new)
dim(x_new)
class(x_new)
library(data.table)
y = round(runif(100))
x = matrix(runif(100 * 100), 100, 100)
x = matrix(runif(100 * 100), 100, 100)
x = data.table(matrix(runif(100 * 100), 100, 100))
x
library(data.table)
y = round(runif(100))
x = data.table(matrix(runif(100 * 5000), 100, 5000))
x
View(x)
dim(x)
names(x)
library(data.table)
y = round(runif(100))
x = data.table(matrix(runif(100 * 5000), 100, 5000))
names(x)
cor(x, y)
x[cor := cor(x, y)]
x[cor = cor(x, y)]
x[,cor := cor(x, y)]
library(data.table)
y = round(runif(100))
x = data.table(matrix(runif(100 * 5000), 100, 5000))
sort(cor(x, y))
cor.x.y = cor(x, y)
cor.x.y
names(cor.x.y)
cor.x.y = data.table(cor = cor(x, y))
setorder(cor.x.y, cor)
?setorder
cor.x.y = data.table(cor = cor(x, y))[order(cor)]
cor.x.y = data.table(cor = cor(x, y))
cor.x.y
data.table(cor = cor(x, y))
cor.x.y = data.table(c = cor(x, y))
cor.x.y
cor.x.y = data.table(list(c = cor(x, y)))
cor.x.y
data.table(c = cor(x, y))
cor.x.y = data.table(c = cor(x, y))[order(cor.V1)]
cor.x.y = data.table(cor(x, y))
cor.x.y
setorder(cor.x.y, -V1)
cor.x.y
?data.table
cor(x, y)
cor.x.y = data.table(cor(x, y).T)
cor(x, y).T
cor.x.y = data.table(transpose(cor(x, y)))
?transpose
cor(x, y)
cor.x.y = transpose(as.data.table(cor(x, y)))
cor.x.y
View(cor.x.y)
cor.x.y$V1
setorder(cor.x.y, -V1)
setcolorder(cor.x.y)
?setcolorder
cor.x.y = as.list(transpose(as.data.table(cor(x, y))))
cor.x.y
sort(cor.x.y)
cor.x.y[which.max(abs(cor.x.y))]
x = data.table(matrix(runif(101 * 5000), 101, 5000))
x = data.table(matrix(runif(100 * 5001), 100, 5001))
colnames(the_data) <- c("y", paste0("x", seq_len(5000)))
library(data.table)
dt = data.table(matrix(runif(100 * 5001), 100, 5001))
colnames(dt) <- c("y", paste0("x", seq_len(5000)))
dt
head(dt)
correlations <- vapply(
the_data[, -1],
function(x)
{
cor(the_data[, 1], x)
},
numeric(1)
)
correlations <- vapply(
dt[, -1],
function(x)
{
cor(dt[, 1], x)
},
numeric(1)
)
correlations
correlations[which.max(abs(correlations))]
?which.max
transpose(correlations)
class(correlations)
sort(correlations)
sort(correlations, decreasing = T)[1:10]
correlations = topk
topk = sort(correlations, decreasing = T)[1:10]
correlations = topk
library(data.table)
dt = data.table(matrix(runif(100 * 5001), 100, 5001))
colnames(dt) <- c("y", paste0("x", seq_len(5000)))
correlations <- vapply(
dt[, -1],
function(x)
{
cor(dt[, 1], x)
},
numeric(1)
)
topk = sort(correlations, decreasing = T)[1:10]
ifelse(correlations = topk, T, F)
ifelse(correlations == topk, T, F)
ifelse(correlations in topk, T, F)
1 in 1:5
ifelse(correlations %in% topk, T, F)
dt[2:5001]
names(dt)
library(data.table)
dt = data.table(matrix(runif(100 * 51), 100, 51))
colnames(dt) <- c("y", paste0("x", seq_len(50)))
correlations <- vapply(
dt[, -1],
function(x)
{
cor(dt[, 1], x)
},
numeric(1)
)
topk = sort(correlations, decreasing = T)[1:10]
topk_index <-ifelse(correlations %in% topk, T, F)
dt[2:51]
dt[, 2:51]
dt[, 2:51][topk_index]
dt[, 2:51][, topk_index]
topk_index
dt[, 2:51][, topk_index, with = F]
?knn.cv()
dt.new[, 1]
dt.new <- dt[, 2:51][, topk_index, with = F]
dt.new
?knn.cv(dt[, 1])
dt[, 1]
fit <- knn.cv(dt.new, dt[, 1], k = 3)
dt.new
dt[, 1]
dim(dt.new)
dim(y)
dim(dt[, 1])
knn.cv(dt.new, dt[, 1], k = 3)
length(dt.new)
fit <- knn.cv(transpose(dt.new), dt[, 1], k = 3)
fit <- knn.cv(transpose(dt.new), transpose(dt[, 1]), k = 3)
dt.new <- cbind(dt[, 1], dt[, 2:51][, topk_index, with = F])
dt.new
dt[-y]
dt[,-y]
fit <- knn.cv(dt[,-y], dt[,y], k = 3)
dit
fit
summary(fit)
library(data.table)
dt = data.table(matrix(runif(100 * 51), 100, 51))
dt[, 1] <- round(dt[, 1])
colnames(dt) <- c("y", paste0("x", seq_len(50)))
correlations <- vapply(
dt[, -1],
function(x)
{
cor(dt[, 1], x)
},
numeric(1)
)
topk = sort(correlations, decreasing = T)[1:10]
topk_index <-ifelse(correlations %in% topk, T, F)
dt.new <- cbind(dt[, 1], dt[, 2:51][, topk_index, with = F])
fit <- knn.cv(dt[,-y], dt[,y], k = 3)
fit
fit == dt[, y]
### vectors, data, matrices, subsetting
x=c(2,7,5)
x
y=seq(from=4,length=3,by=3)
?seq
y
x+y
x/y
x^y
x[2]
x[2:3]
x[-2]
x[-c(1,2)]
z=matrix(seq(1,12),4,3)
z
z[3:4,2:3]
z[,2:3]
z[,1]
z[,1,drop=FALSE]
dim(z)
ls()
rm(y)
ls()
### Generating random data, graphics
x=runif(50)
y=rnorm(50)
plot(x,y)
plot(x,y,xlab="Random Uniform",ylab="Random Normal",pch="*",col="blue")
par(mfrow=c(2,1))
plot(x,y)
hist(y)
par(mfrow=c(1,1))
### Reading in data
Auto=read.csv("Auto.csv")
getwd()
Auto=read.csv("../Auto.csv")
names(Auto)
dim(Auto)
class(Auto)
summary(Auto)
plot(Auto$cylinders,Auto$mpg)
plot(Auto$cyl,Auto$mpg)
attach(Auto)
search()
plot(cylinders,mpg)
cylinders=as.factor(cylinders)
plot(cylinders,mpg,xlab="Cylinders",ylab="Mpg",col="red")
pdf(file="../mpg.pdf")
plot(cylinders,mpg,xlab="Cylinders",ylab="Mpg",col="red")
dev.off()
pairs(Auto,col="brown")
pairs(mpg~cylinders+acceleration+weight,Auto)
q()
library(MASS)
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
### Multiple linear regression
fit2=lm(medv~lstat+age,data=Boston)
summary(fit2)
fit3=lm(medv~.,Boston)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4=update(fit3,~.-age-indus)
summary(fit4)
### Nonlinear terms and Interactions
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit6=lm(medv~lstat +I(lstat^2),Boston); summary(fit6)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20)
fit7=lm(medv~poly(lstat,4))
points(lstat,fitted(fit7),col="blue",pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
###Qualitative predictors
fix(Carseats)
###Qualitative predictors
fix(Carseats)
library(data.table)
dt = data.table(matrix(runif(100 * 51), 100, 51))
dt[, 1] <- round(dt[, 1])
colnames(dt) <- c("y", paste0("x", seq_len(50)))
correlations <- vapply(
dt[, -1],
function(x)
{
cor(dt[, 1], x)
},
numeric(1)
)
topk = sort(correlations, decreasing = T)[1:10]
topk_index <-ifelse(correlations %in% topk, T, F)
dt.new <- cbind(dt[, 1], dt[, 2:51][, topk_index, with = F])
fit <- knn.cv(dt[,-y], dt[,y], k = 3)
fit == dt[, y]
library(data.table)
dt = data.table(matrix(runif(100 * 51), 100, 51))
dt[, 1] <- round(dt[, 1])
colnames(dt) <- c("y", paste0("x", seq_len(50)))
correlations <- vapply(
dt[, -1],
function(x)
{
cor(dt[, 1], x)
},
numeric(1)
)
topk = sort(correlations, decreasing = T)[1:10]
topk_index <-ifelse(correlations %in% topk, T, F)
dt.new <- cbind(dt[, 1], dt[, 2:51][, topk_index, with = F])
fit <- knn.cv(dt[,-y], dt[,y], k = 3)
fit == dt[, y]
library(data.table)
dt = data.table(matrix(runif(100 * 51), 100, 51))
dt[, 1] <- round(dt[, 1])
colnames(dt) <- c("y", paste0("x", seq_len(50)))
correlations <- vapply(
dt[, -1],
function(x)
{
cor(dt[, 1], x)
},
numeric(1)
)
topk = sort(correlations, decreasing = T)[1:10]
topk_index <-ifelse(correlations %in% topk, T, F)
dt.new <- cbind(dt[, 1], dt[, 2:51][, topk_index, with = F])
fit <- knn.cv(dt[,-y], dt[,y], k = 3)
?knn.cv
install.packages(c("ade4", "car", "checkmate", "fda", "Formula", "GGally", "htmlwidgets", "httpuv", "hydroGOF", "hydroTSM", "ISLR", "knitr", "Matrix", "mltools", "plot3D", "Rcmdr", "RcmdrMisc", "Rcpp", "reshape", "rlang", "Rvmmin", "sandwich", "scales", "shiny", "tibble", "vegan"))
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)
?lm.influence
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)
## LOOCV
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta #pretty slow (doesnt use formula (5.2) on page 180)
##Lets write a simple function to use formula (5.2)
loocv=function(fit){
h=lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
## Now we try it out
loocv(glm.fit)
cv.error=rep(0,5)
degree=1:5
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error[d]=loocv(glm.fit)
}
plot(degree,cv.error,type="b")
cv.error10=rep(0,5)
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error10[d]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
Portfolio$X
alpha(Portfolio$X,Portfolio$Y)
?with
?Portfolio
alpha.fn=function(data, index){
with(data[index,],alpha(X,Y))
}
alpha.fn(Portfolio,1:100)
set.seed(1)
sample(1:100,100,replace=TRUE)
sample(1:100,100,replace=TRUE)
sample(1:100,100,replace=TRUE)
alpha.fn (Portfolio,sample(1:100,100,replace=TRUE))
boot.out=boot(Portfolio,alpha.fn,R=1000)
boot.out
alpha.fn (Portfolio,sample(1:100,100,replace=TRUE))
?boot
plot(boot.out)
plot(boot.out)
load(5.R.RData)
load('5.R.RData')
load('5.R.RData')
View(Xy)
lm(y~., Xy)
fit <- lm(y~., Xy)
summary(fit)
matplot(Xy,type="l")
matplot(Xy,type="l")
?matplot
?matplot
matplot(Xy,type="l")
sines <- outer(1:20, 1:4, function(x, y) sin(x / 20 * pi * y))
matplot(sines, pch = 1:4, type = "o", col = rainbow(ncol(sines)))
sines
matplot(Xy,type="l", verbose = T)
?pch
matplot(Xy,type="l", col = ('b', 'r', 'g'))
?col
matplot(Xy,type="l", col = ('blue', 'red', 'green'))
matplot(Xy,type="l", col = c('blue', 'red', 'green'))
plot(y~X1, Xy)
plot(y~X2, Xy)
fit$coefficients
fit$coefficients
?fit
?lm
fit$coefficients[2]
alpha.fn=function(data, index){
lm(y~., data[index,])$coefficients[2]
}
Xy
alpha.fn (Xy,sample(1:1000,1000,replace=TRUE))
boot.out=boot(Xy,alpha.fn,R=1000)
boot.out
s <- function() {}
s <- function() {
new.rows <- c()
for(i in 1:10) {}
}
s <- function() {
new.rows <- c()
for(i in 1:10) {
x <- sample(1:901, 1)
new.rows <- c(new.rows, x : x + 100)
}
return(new.rows)
}
s()
x <- sample(1:901, 1)
x
x : x + 100
x : (x + 100)
s <- function() {
new.rows <- c()
for(i in 1:10) {
x <- sample(1:901, 1)
new.rows <- c(new.rows, x : (x + 100))
}
return(new.rows)
}
s()
alpha.fn (Xy,s)
alpha.fn
alpha.fn(Portfolio,s())
alpha.fn(Xy,s())
alpha.fn (Xy,s())
boot.out=boot(Xy,alpha.fn,R=1000)
boot.out
?boot
alpha.fn (Xy,s())
alpha.fn (Xy,s())
alpha.fn (Xy,s())
x <- for(i in 1:1000) {alpha.fn (Xy,s())}
x
x <- c()
for(i in 1:1000) {x <- c(x, alpha.fn (Xy,s()))}
x
sd(x)
s()
s()
s()
s()
s()
dim(s())
length(s())
s <- function() {
new.rows <- c()
for(i in 1:10) {
x <- sample(1:901, 1)
new.rows <- c(new.rows, x : (x + 99))
}
return(new.rows)
}
alpha.fn (Xy,s())
alpha.fn (Xy,s())
alpha.fn (Xy,s())
alpha.fn (Xy,s())
for(i in 1:1000) {x <- c(x, alpha.fn (Xy,s()))}
x <- c()
for(i in 1:1000) {x <- c(x, alpha.fn (Xy,s()))}
sd(x)
